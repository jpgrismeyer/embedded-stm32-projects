
stm32l47xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001ac0  08001ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b10  08001b10  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001b10  08001b10  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b10  08001b10  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b10  08001b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b14  08001b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000188  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   000020c5  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000098a  00000000  00000000  00022188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  00022b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000156  00000000  00000000  00022d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002e7f  00000000  00000000  00022e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003014  00000000  00000000  00025cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000afa8  00000000  00000000  00028cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b0c  00000000  00000000  00033c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001aa8 	.word	0x08001aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08001aa8 	.word	0x08001aa8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

I2C_Handle_t I2C2Handle;
USART_Handle_t USART2Handle;

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <I2C2_GPIOInits>:

void I2C2_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C2_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002ca:	2304      	movs	r3, #4
 80002cc:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ce:	2301      	movs	r3, #1
 80002d0:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002d2:	2301      	movs	r3, #1
 80002d4:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80002da:	230a      	movs	r3, #10
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fa1d 	bl	8000720 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 80002e6:	230b      	movs	r3, #11
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fa17 	bl	8000720 <GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	48000400 	.word	0x48000400

08000300 <I2C2_Inits>:

void I2C2_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C2Handle.pI2Cx = I2C2;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <I2C2_Inits+0x20>)
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <I2C2_Inits+0x24>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C2Handle.I2CConfig.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <I2C2_Inits+0x20>)
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <I2C2_Inits+0x28>)
 800030e:	605a      	str	r2, [r3, #4]
	I2C2Handle.I2CConfig.I2C_DeviceAddress = 0x00;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <I2C2_Inits+0x20>)
 8000312:	2200      	movs	r2, #0
 8000314:	721a      	strb	r2, [r3, #8]

	I2C_Init(&I2C2Handle);
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <I2C2_Inits+0x20>)
 8000318:	f000 fcc8 	bl	8000cac <I2C_Init>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000006c 	.word	0x2000006c
 8000324:	40005800 	.word	0x40005800
 8000328:	000186a0 	.word	0x000186a0

0800032c <USART2_GPIOInits>:

void USART2_GPIOInits(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000336:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000338:	2302      	movs	r3, #2
 800033a:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800033c:	2307      	movs	r3, #7
 800033e:	737b      	strb	r3, [r7, #13]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000340:	2300      	movs	r3, #0
 8000342:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000344:	2300      	movs	r3, #0
 8000346:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000348:	2302      	movs	r3, #2
 800034a:	72bb      	strb	r3, [r7, #10]

	// TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800034c:	2302      	movs	r3, #2
 800034e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f9e4 	bl	8000720 <GPIO_Init>

	// RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000358:	2303      	movs	r3, #3
 800035a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f9de 	bl	8000720 <GPIO_Init>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <USART2_Inits>:

void USART2_Inits(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	USART2Handle.pUSARTx = USART2;
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <USART2_Inits+0x3c>)
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <USART2_Inits+0x40>)
 8000374:	601a      	str	r2, [r3, #0]
	USART2Handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <USART2_Inits+0x3c>)
 8000378:	2200      	movs	r2, #0
 800037a:	711a      	strb	r2, [r3, #4]
	USART2Handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <USART2_Inits+0x3c>)
 800037e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000382:	609a      	str	r2, [r3, #8]
	USART2Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <USART2_Inits+0x3c>)
 8000386:	2200      	movs	r2, #0
 8000388:	731a      	strb	r2, [r3, #12]
	USART2Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <USART2_Inits+0x3c>)
 800038c:	2200      	movs	r2, #0
 800038e:	739a      	strb	r2, [r3, #14]
	USART2Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <USART2_Inits+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	735a      	strb	r2, [r3, #13]
	USART2Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <USART2_Inits+0x3c>)
 8000398:	2200      	movs	r2, #0
 800039a:	73da      	strb	r2, [r3, #15]

	USART_Init(&USART2Handle);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <USART2_Inits+0x3c>)
 800039e:	f000 fe0d 	bl	8000fbc <USART_Init>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000007c 	.word	0x2000007c
 80003ac:	40004400 	.word	0x40004400

080003b0 <uart_print>:

void uart_print(char *msg)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	USART_SendData(&USART2Handle, (uint8_t *)msg, strlen(msg));
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff11 	bl	80001e0 <strlen>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	6879      	ldr	r1, [r7, #4]
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <uart_print+0x24>)
 80003c6:	f000 fe84 	bl	80010d2 <USART_SendData>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000007c 	.word	0x2000007c

080003d8 <main>:

int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b092      	sub	sp, #72	; 0x48
 80003dc:	af00      	add	r7, sp, #0
	LED_Init();
 80003de:	f000 f897 	bl	8000510 <LED_Init>
	I2C2_GPIOInits();
 80003e2:	f7ff ff6b 	bl	80002bc <I2C2_GPIOInits>
	I2C2_Inits();
 80003e6:	f7ff ff8b 	bl	8000300 <I2C2_Inits>
	USART2_GPIOInits();
 80003ea:	f7ff ff9f 	bl	800032c <USART2_GPIOInits>
	USART2_Inits();
 80003ee:	f7ff ffbd 	bl	800036c <USART2_Inits>

	HTS221_PowerOn(&I2C2Handle);
 80003f2:	4815      	ldr	r0, [pc, #84]	; (8000448 <main+0x70>)
 80003f4:	f000 fb95 	bl	8000b22 <HTS221_PowerOn>

	while (1)
	{
		int16_t temp_raw = HTS221_ReadTemperatureRaw(&I2C2Handle);
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <main+0x70>)
 80003fa:	f000 fba8 	bl	8000b4e <HTS221_ReadTemperatureRaw>
 80003fe:	4603      	mov	r3, r0
 8000400:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		int16_t hum_raw = HTS221_ReadHumidityRaw(&I2C2Handle);
 8000404:	4810      	ldr	r0, [pc, #64]	; (8000448 <main+0x70>)
 8000406:	f000 fbdd 	bl	8000bc4 <HTS221_ReadHumidityRaw>
 800040a:	4603      	mov	r3, r0
 800040c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		if (temp_raw != 0 && hum_raw != 0)
 8000410:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000414:	2b00      	cmp	r3, #0
 8000416:	d012      	beq.n	800043e <main+0x66>
 8000418:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00e      	beq.n	800043e <main+0x66>
		{
			LED_On();
 8000420:	f000 f894 	bl	800054c <LED_On>
			char buffer[64];
			sprintf(buffer, "Temp raw: %d, Hum raw: %d\r\n", temp_raw, hum_raw);
 8000424:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000428:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800042c:	1d38      	adds	r0, r7, #4
 800042e:	4907      	ldr	r1, [pc, #28]	; (800044c <main+0x74>)
 8000430:	f000 fe9e 	bl	8001170 <siprintf>
			uart_print(buffer);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffba 	bl	80003b0 <uart_print>
		{
 800043c:	e001      	b.n	8000442 <main+0x6a>
		}
		else
		{
			LED_Off();
 800043e:	f000 f891 	bl	8000564 <LED_Off>
		}

		delay();
 8000442:	f7ff ff25 	bl	8000290 <delay>
	{
 8000446:	e7d7      	b.n	80003f8 <main+0x20>
 8000448:	2000006c 	.word	0x2000006c
 800044c:	08001ac0 	.word	0x08001ac0

08000450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <_sbrk+0x5c>)
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <_sbrk+0x60>)
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <_sbrk+0x64>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <_sbrk+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d207      	bcs.n	8000490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000480:	f000 fe96 	bl	80011b0 <__errno>
 8000484:	4603      	mov	r3, r0
 8000486:	220c      	movs	r2, #12
 8000488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	e009      	b.n	80004a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <_sbrk+0x64>)
 80004a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20018000 	.word	0x20018000
 80004b0:	00000400 	.word	0x00000400
 80004b4:	2000008c 	.word	0x2000008c
 80004b8:	200001d8 	.word	0x200001d8

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 fe67 	bl	80011bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff ff73 	bl	80003d8 <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000500:	08001b18 	.word	0x08001b18
  ldr r2, =_sbss
 8000504:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000508:	200001d8 	.word	0x200001d8

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <LED_Init>:

#include "stm32l47xx.h"
#include "stm32l475xx_gpio_driver.h"

void LED_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed;

    GpioLed.pGPIOx = GPIOB;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <LED_Init+0x38>)
 8000518:	607b      	str	r3, [r7, #4]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800051a:	230e      	movs	r3, #14
 800051c:	723b      	strb	r3, [r7, #8]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800051e:	2301      	movs	r3, #1
 8000520:	727b      	strb	r3, [r7, #9]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000522:	2301      	movs	r3, #1
 8000524:	72bb      	strb	r3, [r7, #10]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000526:	2300      	movs	r3, #0
 8000528:	733b      	strb	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800052a:	2300      	movs	r3, #0
 800052c:	72fb      	strb	r3, [r7, #11]

    GPIO_PeriClockControl(GPIOB, ENABLE);
 800052e:	2101      	movs	r1, #1
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <LED_Init+0x38>)
 8000532:	f000 f823 	bl	800057c <GPIO_PeriClockControl>
    GPIO_Init(&GpioLed);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f8f1 	bl	8000720 <GPIO_Init>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	48000400 	.word	0x48000400

0800054c <LED_On>:
void LED_On(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_14, ENABLE);
 8000550:	2201      	movs	r2, #1
 8000552:	210e      	movs	r1, #14
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <LED_On+0x14>)
 8000556:	f000 fabf 	bl	8000ad8 <GPIO_WriteToOutputPin>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	48000400 	.word	0x48000400

08000564 <LED_Off>:

void LED_Off(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_14, DISABLE);
 8000568:	2200      	movs	r2, #0
 800056a:	210e      	movs	r1, #14
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <LED_Off+0x14>)
 800056e:	f000 fab3 	bl	8000ad8 <GPIO_WriteToOutputPin>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	48000400 	.word	0x48000400

0800057c <GPIO_PeriClockControl>:
 * @Note								-	none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d157      	bne.n	800063e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx==GPIOA)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000596:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a59      	ldr	r2, [pc, #356]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
			{
				GPIOH_PCLK_DI();
			}
		}

}
 80005a2:	e0a6      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOB)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a57      	ldr	r2, [pc, #348]	; (8000704 <GPIO_PeriClockControl+0x188>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005ac:	4b54      	ldr	r3, [pc, #336]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	4a53      	ldr	r2, [pc, #332]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005b8:	e09b      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOC)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a52      	ldr	r2, [pc, #328]	; (8000708 <GPIO_PeriClockControl+0x18c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005c2:	4b4f      	ldr	r3, [pc, #316]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a4e      	ldr	r2, [pc, #312]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005ce:	e090      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOD)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a4e      	ldr	r2, [pc, #312]	; (800070c <GPIO_PeriClockControl+0x190>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005d8:	4b49      	ldr	r3, [pc, #292]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005dc:	4a48      	ldr	r2, [pc, #288]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005e4:	e085      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOE)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <GPIO_PeriClockControl+0x194>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a43      	ldr	r2, [pc, #268]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005fa:	e07a      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOF)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a45      	ldr	r2, [pc, #276]	; (8000714 <GPIO_PeriClockControl+0x198>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000608:	4a3d      	ldr	r2, [pc, #244]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000610:	e06f      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOG)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a40      	ldr	r2, [pc, #256]	; (8000718 <GPIO_PeriClockControl+0x19c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a38      	ldr	r2, [pc, #224]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000626:	e064      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
		}else if (pGPIOx==GPIOH)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a3c      	ldr	r2, [pc, #240]	; (800071c <GPIO_PeriClockControl+0x1a0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d160      	bne.n	80006f2 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000634:	4a32      	ldr	r2, [pc, #200]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800063c:	e059      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
	else if(EnorDi==DISABLE)
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d156      	bne.n	80006f2 <GPIO_PeriClockControl+0x176>
			if(pGPIOx==GPIOA)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0xde>
				GPIOA_PCLK_DI();
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000658:	e04b      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOB)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a29      	ldr	r2, [pc, #164]	; (8000704 <GPIO_PeriClockControl+0x188>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0xf4>
				GPIOB_PCLK_DI();
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a26      	ldr	r2, [pc, #152]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000668:	f023 0302 	bic.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800066e:	e040      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a25      	ldr	r2, [pc, #148]	; (8000708 <GPIO_PeriClockControl+0x18c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <GPIO_PeriClockControl+0x10a>
				GPIOC_PCLK_DI();
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <GPIO_PeriClockControl+0x184>)
 800067e:	f023 0304 	bic.w	r3, r3, #4
 8000682:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000684:	e035      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOD)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <GPIO_PeriClockControl+0x190>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0x120>
				GPIOD_PCLK_DI();
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <GPIO_PeriClockControl+0x184>)
 8000694:	f023 0308 	bic.w	r3, r3, #8
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800069a:	e02a      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOE)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_PeriClockControl+0x194>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0x136>
				GPIOE_PCLK_DI();
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006aa:	f023 0310 	bic.w	r3, r3, #16
 80006ae:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006b0:	e01f      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOF)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <GPIO_PeriClockControl+0x198>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x14c>
				GPIOF_PCLK_DI();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006c0:	f023 0320 	bic.w	r3, r3, #32
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006c6:	e014      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOG)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <GPIO_PeriClockControl+0x19c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0x162>
				GPIOG_PCLK_DI();
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006dc:	e009      	b.n	80006f2 <GPIO_PeriClockControl+0x176>
			}else if (pGPIOx==GPIOH)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <GPIO_PeriClockControl+0x1a0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d105      	bne.n	80006f2 <GPIO_PeriClockControl+0x176>
				GPIOH_PCLK_DI();
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <GPIO_PeriClockControl+0x184>)
 80006ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400
 8000718:	48001800 	.word	0x48001800
 800071c:	48001c00 	.word	0x48001c00

08000720 <GPIO_Init>:
 * @Note								-	none
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp register
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff22 	bl	800057c <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d820      	bhi.n	8000782 <GPIO_Init+0x62>
	//The none interrupt mode
	{
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER&=~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2103      	movs	r1, #3
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER|=temp; //setting
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	430a      	orrs	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e102      	b.n	8000988 <GPIO_Init+0x268>

	}else
	{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b04      	cmp	r3, #4
 8000788:	d12c      	bne.n	80007e4 <GPIO_Init+0xc4>
		{
			//1. Configure FTSR
			pGPIOHandle->pGPIOx->MODER&=~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2103      	movs	r1, #3
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER|=0x0; //setting
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	601a      	str	r2, [r3, #0]

			EXTI->FTSR1 |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <GPIO_Init+0x1dc>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7912      	ldrb	r2, [r2, #4]
 80007bc:	4611      	mov	r1, r2
 80007be:	2201      	movs	r2, #1
 80007c0:	408a      	lsls	r2, r1
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <GPIO_Init+0x1dc>)
 80007c6:	430b      	orrs	r3, r1
 80007c8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); //Clear corresponding rtsr bit
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <GPIO_Init+0x1dc>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	7912      	ldrb	r2, [r2, #4]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a47      	ldr	r2, [pc, #284]	; (80008fc <GPIO_Init+0x1dc>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6093      	str	r3, [r2, #8]
 80007e2:	e04a      	b.n	800087a <GPIO_Init+0x15a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d12c      	bne.n	8000846 <GPIO_Init+0x126>
		{
			pGPIOHandle->pGPIOx->MODER&=~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	2103      	movs	r1, #3
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	400a      	ands	r2, r1
 8000808:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER|=0x0; //setting
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	601a      	str	r2, [r3, #0]

			//1. COnfigure RTSR
			EXTI->RTSR1 |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <GPIO_Init+0x1dc>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	7912      	ldrb	r2, [r2, #4]
 800081e:	4611      	mov	r1, r2
 8000820:	2201      	movs	r2, #1
 8000822:	408a      	lsls	r2, r1
 8000824:	4611      	mov	r1, r2
 8000826:	4a35      	ldr	r2, [pc, #212]	; (80008fc <GPIO_Init+0x1dc>)
 8000828:	430b      	orrs	r3, r1
 800082a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); //Clear corresponding ftsr bit
 800082c:	4b33      	ldr	r3, [pc, #204]	; (80008fc <GPIO_Init+0x1dc>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	7912      	ldrb	r2, [r2, #4]
 8000834:	4611      	mov	r1, r2
 8000836:	2201      	movs	r2, #1
 8000838:	408a      	lsls	r2, r1
 800083a:	43d2      	mvns	r2, r2
 800083c:	4611      	mov	r1, r2
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <GPIO_Init+0x1dc>)
 8000840:	400b      	ands	r3, r1
 8000842:	60d3      	str	r3, [r2, #12]
 8000844:	e019      	b.n	800087a <GPIO_Init+0x15a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	2b06      	cmp	r3, #6
 800084c:	d115      	bne.n	800087a <GPIO_Init+0x15a>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR1 |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <GPIO_Init+0x1dc>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	7912      	ldrb	r2, [r2, #4]
 8000856:	4611      	mov	r1, r2
 8000858:	2201      	movs	r2, #1
 800085a:	408a      	lsls	r2, r1
 800085c:	4611      	mov	r1, r2
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <GPIO_Init+0x1dc>)
 8000860:	430b      	orrs	r3, r1
 8000862:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <GPIO_Init+0x1dc>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <GPIO_Init+0x1dc>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6093      	str	r3, [r2, #8]
		}


		// 2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  // Índice del registro EXTICR
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  // Índice del campo dentro del registro
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);   // Código del puerto GPIO
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000894:	d042      	beq.n	800091c <GPIO_Init+0x1fc>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <GPIO_Init+0x1e0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d02b      	beq.n	80008f8 <GPIO_Init+0x1d8>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <GPIO_Init+0x1e4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d024      	beq.n	80008f4 <GPIO_Init+0x1d4>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <GPIO_Init+0x1e8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d01d      	beq.n	80008f0 <GPIO_Init+0x1d0>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <GPIO_Init+0x1ec>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d016      	beq.n	80008ec <GPIO_Init+0x1cc>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <GPIO_Init+0x1f0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d00f      	beq.n	80008e8 <GPIO_Init+0x1c8>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <GPIO_Init+0x1f4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d008      	beq.n	80008e4 <GPIO_Init+0x1c4>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <GPIO_Init+0x1f8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d101      	bne.n	80008e0 <GPIO_Init+0x1c0>
 80008dc:	2307      	movs	r3, #7
 80008de:	e01e      	b.n	800091e <GPIO_Init+0x1fe>
 80008e0:	2300      	movs	r3, #0
 80008e2:	e01c      	b.n	800091e <GPIO_Init+0x1fe>
 80008e4:	2306      	movs	r3, #6
 80008e6:	e01a      	b.n	800091e <GPIO_Init+0x1fe>
 80008e8:	2305      	movs	r3, #5
 80008ea:	e018      	b.n	800091e <GPIO_Init+0x1fe>
 80008ec:	2304      	movs	r3, #4
 80008ee:	e016      	b.n	800091e <GPIO_Init+0x1fe>
 80008f0:	2303      	movs	r3, #3
 80008f2:	e014      	b.n	800091e <GPIO_Init+0x1fe>
 80008f4:	2302      	movs	r3, #2
 80008f6:	e012      	b.n	800091e <GPIO_Init+0x1fe>
 80008f8:	2301      	movs	r3, #1
 80008fa:	e010      	b.n	800091e <GPIO_Init+0x1fe>
 80008fc:	40010400 	.word	0x40010400
 8000900:	48000400 	.word	0x48000400
 8000904:	48000800 	.word	0x48000800
 8000908:	48000c00 	.word	0x48000c00
 800090c:	48001000 	.word	0x48001000
 8000910:	48001400 	.word	0x48001400
 8000914:	48001800 	.word	0x48001800
 8000918:	48001c00 	.word	0x48001c00
 800091c:	2300      	movs	r3, #0
 800091e:	747b      	strb	r3, [r7, #17]

		// Habilitar el reloj para SYSCFG
		SYSCFG_PCLK_EN();
 8000920:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <GPIO_Init+0x3ac>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	4a69      	ldr	r2, [pc, #420]	; (8000acc <GPIO_Init+0x3ac>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6613      	str	r3, [r2, #96]	; 0x60

		// Limpiar el campo correspondiente a EXTI2 y asignar el código del puerto
		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));  // Limpiar el campo
 800092c:	4a68      	ldr	r2, [pc, #416]	; (8000ad0 <GPIO_Init+0x3b0>)
 800092e:	7cfb      	ldrb	r3, [r7, #19]
 8000930:	3302      	adds	r3, #2
 8000932:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000936:	7cbb      	ldrb	r3, [r7, #18]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	210f      	movs	r1, #15
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	4962      	ldr	r1, [pc, #392]	; (8000ad0 <GPIO_Init+0x3b0>)
 8000946:	7cfb      	ldrb	r3, [r7, #19]
 8000948:	4002      	ands	r2, r0
 800094a:	3302      	adds	r3, #2
 800094c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));  // Asignar el código del puerto
 8000950:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <GPIO_Init+0x3b0>)
 8000952:	7cfb      	ldrb	r3, [r7, #19]
 8000954:	3302      	adds	r3, #2
 8000956:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800095a:	7c79      	ldrb	r1, [r7, #17]
 800095c:	7cbb      	ldrb	r3, [r7, #18]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4618      	mov	r0, r3
 8000966:	495a      	ldr	r1, [pc, #360]	; (8000ad0 <GPIO_Init+0x3b0>)
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	4302      	orrs	r2, r0
 800096c:	3302      	adds	r3, #2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;  // Habilitar la máscara de interrupción
 8000972:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <GPIO_Init+0x3b4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	7912      	ldrb	r2, [r2, #4]
 800097a:	4611      	mov	r1, r2
 800097c:	2201      	movs	r2, #1
 800097e:	408a      	lsls	r2, r1
 8000980:	4611      	mov	r1, r2
 8000982:	4a54      	ldr	r2, [pc, #336]	; (8000ad4 <GPIO_Init+0x3b4>)
 8000984:	430b      	orrs	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	799b      	ldrb	r3, [r3, #6]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR&=~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2103      	movs	r1, #3
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	400a      	ands	r2, r1
 80009ba:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR|=temp; //setting
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6899      	ldr	r1, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	609a      	str	r2, [r3, #8]
		temp=0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

	//3. Configure pupd settings
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR&=~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2103      	movs	r1, #3
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	400a      	ands	r2, r1
 80009fe:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR|=temp;   //no se tocan otros bits del registro (|=)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68d9      	ldr	r1, [r3, #12]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	60da      	str	r2, [r3, #12]
		temp=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
	//4. Configure otype
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER&=~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	408b      	lsls	r3, r1
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER|=temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6859      	ldr	r1, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	605a      	str	r2, [r3, #4]
		temp=0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
	//5. Configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d132      	bne.n	8000ac2 <GPIO_Init+0x3a2>
	{
		//Configure the alt function registers
		uint32_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF<<(4 * temp2));  //clearing
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	3208      	adds	r2, #8
 8000a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	210f      	movs	r1, #15
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4011      	ands	r1, r2
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	3208      	adds	r2, #8
 8000a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2)); //setting
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7a5b      	ldrb	r3, [r3, #9]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4311      	orrs	r1, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	3208      	adds	r2, #8
 8000abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <GPIO_WriteToOutputPin>:
 *
 * @Note								-	none
 *
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber, uint8_t Value)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 8000ae8:	78bb      	ldrb	r3, [r7, #2]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d109      	bne.n	8000b02 <GPIO_WriteToOutputPin+0x2a>
	{
		//Write 1 to the output data register at the bit field corresponding to the pin
		pGPIOx->ODR |= (1 << PinNumber);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	78fa      	ldrb	r2, [r7, #3]
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~(1<< PinNumber);
	}
}
 8000b00:	e009      	b.n	8000b16 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1<< PinNumber);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	78fa      	ldrb	r2, [r7, #3]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	43d2      	mvns	r2, r2
 8000b10:	401a      	ands	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	615a      	str	r2, [r3, #20]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <HTS221_PowerOn>:

    return value;
}

void HTS221_PowerOn(I2C_Handle_t *I2C_Handle)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af02      	add	r7, sp, #8
 8000b28:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    data[0] = HTS221_CTRL_REG1;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	733b      	strb	r3, [r7, #12]
    data[1] = 0x84;  // PD=1 (bit 7), BDU=1 (bit 2), ODR=1Hz (01)
 8000b2e:	2384      	movs	r3, #132	; 0x84
 8000b30:	737b      	strb	r3, [r7, #13]

    I2C_MasterSendData(I2C_Handle->pI2Cx, data, 2, HTS221_ADDR, 0);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f107 010c 	add.w	r1, r7, #12
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	235f      	movs	r3, #95	; 0x5f
 8000b40:	2202      	movs	r2, #2
 8000b42:	f000 f8ef 	bl	8000d24 <I2C_MasterSendData>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HTS221_ReadTemperatureRaw>:

int16_t HTS221_ReadTemperatureRaw(I2C_Handle_t *I2C_Handle)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	6078      	str	r0, [r7, #4]
    uint8_t reg = HTS221_TEMP_OUT_L;
 8000b56:	232a      	movs	r3, #42	; 0x2a
 8000b58:	73fb      	strb	r3, [r7, #15]
    uint8_t temp_l, temp_h;

    I2C_MasterSendData(I2C_Handle->pI2Cx, &reg, 1, HTS221_ADDR, 0);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	f107 010f 	add.w	r1, r7, #15
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	235f      	movs	r3, #95	; 0x5f
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f000 f8db 	bl	8000d24 <I2C_MasterSendData>
    I2C_MasterReceiveData(I2C_Handle->pI2Cx, &temp_l, 1, HTS221_ADDR, 0);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f107 010e 	add.w	r1, r7, #14
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	235f      	movs	r3, #95	; 0x5f
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f000 f933 	bl	8000de8 <I2C_MasterReceiveData>

    reg = HTS221_TEMP_OUT_H;
 8000b82:	232b      	movs	r3, #43	; 0x2b
 8000b84:	73fb      	strb	r3, [r7, #15]
    I2C_MasterSendData(I2C_Handle->pI2Cx, &reg, 1, HTS221_ADDR, 0);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	f107 010f 	add.w	r1, r7, #15
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	235f      	movs	r3, #95	; 0x5f
 8000b94:	2201      	movs	r2, #1
 8000b96:	f000 f8c5 	bl	8000d24 <I2C_MasterSendData>
    I2C_MasterReceiveData(I2C_Handle->pI2Cx, &temp_h, 1, HTS221_ADDR, 0);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	f107 010d 	add.w	r1, r7, #13
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	235f      	movs	r3, #95	; 0x5f
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f000 f91d 	bl	8000de8 <I2C_MasterReceiveData>

    return (int16_t)((temp_h << 8) | temp_l);
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b21b      	sxth	r3, r3
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HTS221_ReadHumidityRaw>:

int16_t HTS221_ReadHumidityRaw(I2C_Handle_t *I2C_Handle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	6078      	str	r0, [r7, #4]
    uint8_t reg = HTS221_HUMIDITY_OUT_L;
 8000bcc:	2328      	movs	r3, #40	; 0x28
 8000bce:	73fb      	strb	r3, [r7, #15]
    uint8_t hum_l, hum_h;

    I2C_MasterSendData(I2C_Handle->pI2Cx, &reg, 1, HTS221_ADDR, 0);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f107 010f 	add.w	r1, r7, #15
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	235f      	movs	r3, #95	; 0x5f
 8000bde:	2201      	movs	r2, #1
 8000be0:	f000 f8a0 	bl	8000d24 <I2C_MasterSendData>
    I2C_MasterReceiveData(I2C_Handle->pI2Cx, &hum_l, 1, HTS221_ADDR, 0);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	f107 010e 	add.w	r1, r7, #14
 8000bec:	2300      	movs	r3, #0
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	235f      	movs	r3, #95	; 0x5f
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f000 f8f8 	bl	8000de8 <I2C_MasterReceiveData>

    reg = HTS221_HUMIDITY_OUT_H;
 8000bf8:	2329      	movs	r3, #41	; 0x29
 8000bfa:	73fb      	strb	r3, [r7, #15]
    I2C_MasterSendData(I2C_Handle->pI2Cx, &reg, 1, HTS221_ADDR, 0);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	f107 010f 	add.w	r1, r7, #15
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	235f      	movs	r3, #95	; 0x5f
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f000 f88a 	bl	8000d24 <I2C_MasterSendData>
    I2C_MasterReceiveData(I2C_Handle->pI2Cx, &hum_h, 1, HTS221_ADDR, 0);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	f107 010d 	add.w	r1, r7, #13
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	235f      	movs	r3, #95	; 0x5f
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f000 f8e2 	bl	8000de8 <I2C_MasterReceiveData>

    return (int16_t)((hum_h << 8) | hum_l);
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <I2C_PeriClockControl>:

#include "stm32l47xx_i2c_driver.h"
#include"stm32l47xx_hts221.h"

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d11f      	bne.n	8000c8e <I2C_PeriClockControl+0x52>
    {
        if (pI2Cx == I2C1) I2C1_PCLK_EN();
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <I2C_PeriClockControl+0x60>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d106      	bne.n	8000c64 <I2C_PeriClockControl+0x28>
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
        else if (pI2Cx == I2C2) I2C2_PCLK_EN();
        else if (pI2Cx == I2C3) I2C3_PCLK_EN();
    }
}
 8000c62:	e014      	b.n	8000c8e <I2C_PeriClockControl+0x52>
        else if (pI2Cx == I2C2) I2C2_PCLK_EN();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <I2C_PeriClockControl+0x68>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d106      	bne.n	8000c7a <I2C_PeriClockControl+0x3e>
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c76:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c78:	e009      	b.n	8000c8e <I2C_PeriClockControl+0x52>
        else if (pI2Cx == I2C3) I2C3_PCLK_EN();
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <I2C_PeriClockControl+0x6c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d105      	bne.n	8000c8e <I2C_PeriClockControl+0x52>
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <I2C_PeriClockControl+0x64>)
 8000c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c8c:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	40005c00 	.word	0x40005c00

08000cac <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

	    // Paso 1: Habilitar el reloj del periférico
	    I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffbe 	bl	8000c3c <I2C_PeriClockControl>

	    // Paso 2: Deshabilitar el periférico I2C
	    pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0201 	bic.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	    // Paso 3: Configurar filtros
	    pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ANFOFF);        // ANFOFF = 0 (filtro analógico activado)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cde:	601a      	str	r2, [r3, #0]
	    pI2CHandle->pI2Cx->CR1 &= ~(0xF << I2C_CR1_DNF);       // DNF[3:0] = 0000 (filtro digital desactivado)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000cee:	601a      	str	r2, [r3, #0]

	    // Paso 4: Configurar TIMINGR para 100kHz con reloj de 16 MHz
	    pI2CHandle->pI2Cx->TIMINGR = 0x00303D5B;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <I2C_Init+0x74>)
 8000cf6:	611a      	str	r2, [r3, #16]

	    // Paso 5: Clock stretching permitido
	    pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_NOSTRETCH);        // NOSTRETCH = 0
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d06:	601a      	str	r2, [r3, #0]


	    // Paso 6: Habilitar el periférico
	    pI2CHandle->pI2Cx->CR1 |= (1 << 0);          // PE = 1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]


	}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	00303d5b 	.word	0x00303d5b

08000d24 <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_RegDef_t *pI2Cx, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	70fb      	strb	r3, [r7, #3]

	// 1. Asegurarse que el peripheral esté listo (esperar que no esté ocupado)
	    while (pI2Cx->ISR & (1<< I2C_ISR_BUSY ));
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f9      	bne.n	8000d34 <I2C_MasterSendData+0x10>
	    GPIOB->ODR |= (1 << 14);
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <I2C_MasterSendData+0xbc>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <I2C_MasterSendData+0xbc>)
 8000d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4a:	6153      	str	r3, [r2, #20]
	    // 2. Limpiar el registro CR2 antes de configurar
	    pI2Cx->CR2 &= ~(0x3FF | (1 << 10) | (1 << 11) | (1 << 12) | (0xFF << 16) | (1 << 25) | (1 << 13));
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <I2C_MasterSendData+0xc0>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	6053      	str	r3, [r2, #4]

	    // 3. Configurar dirección del esclavo, dirección de escritura, tamaño, AUTOEND, START
	    uint32_t tmpreg = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
	    tmpreg |= (SlaveAddr << I2C_CR2_SADD);     // SADD[9:0]
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
	    tmpreg |= (0 << I2C_CR2_RD_WRN);            // RD_WRN = 0 → write
	    tmpreg |= (0 << I2C_CR2_ADD10);            // ADD10 = 0 → 7-bit
	    tmpreg |= (0 << I2C_CR2_HEAD10R);            // HEAD10R = 0
	    tmpreg |= (Len << I2C_CR2_NBYTES);          // NBYTES
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
	    tmpreg |= (1 << I2C_CR2_AUTOEND);            // AUTOEND = 1
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d74:	613b      	str	r3, [r7, #16]
	    tmpreg |= (1 << I2C_CR2_START);            // START = 1
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d7c:	613b      	str	r3, [r7, #16]

	    pI2Cx->CR2 |= tmpreg;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	605a      	str	r2, [r3, #4]

	    // 4. Enviar los datos
	    for (uint32_t i = 0; i < Len; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e010      	b.n	8000db2 <I2C_MasterSendData+0x8e>
	    {
	        // Esperar a que TXIS esté seteado
	        while (!(pI2Cx->ISR & I2C_ISR_TXIS));
 8000d90:	bf00      	nop
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f9      	beq.n	8000d92 <I2C_MasterSendData+0x6e>

	        // Cargar el byte al registro de datos
	        pI2Cx->TXDR = pTxBuffer[i];
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
	    for (uint32_t i = 0; i < Len; i++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3ea      	bcc.n	8000d90 <I2C_MasterSendData+0x6c>
	    }

	    // 5. Esperar a que se complete la transferencia (TC o STOPF)
	    while (!(pI2Cx->ISR & (1<<I2C_ISR_STOPF )));
 8000dba:	bf00      	nop
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f9      	beq.n	8000dbc <I2C_MasterSendData+0x98>

	    // 6. Limpiar el flag STOPF escribiendo 1 en el bit correspondiente
	    pI2Cx->ICR |= (1<< 5);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	61da      	str	r2, [r3, #28]
	}
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	48000400 	.word	0x48000400
 8000de4:	fd00c000 	.word	0xfd00c000

08000de8 <I2C_MasterReceiveData>:



void I2C_MasterReceiveData(I2C_RegDef_t *pI2Cx, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	70fb      	strb	r3, [r7, #3]
	 // 1. Esperar si el periférico está ocupado
	    while (pI2Cx->ISR & I2C_ISR_BUSY);
 8000df6:	bf00      	nop
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f9      	bne.n	8000df8 <I2C_MasterReceiveData+0x10>

	    // 2. Limpiar CR2
	    pI2Cx->CR2 &= ~(0x3FF | (1 << 10) | (1 << 11) | (1 << 12) | (0xFF << 16) | (1 << 25) | (1 << 13));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <I2C_MasterReceiveData+0xb8>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	6053      	str	r3, [r2, #4]

	    // 3. Configurar nueva transferencia: dirección, modo lectura, número de bytes, AUTOEND, START
	    uint32_t tmpreg = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
	    tmpreg |= (SlaveAddr << I2C_CR2_SADD);     // SADD[9:0]
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
	    tmpreg |= (1 << I2C_CR2_RD_WRN);            // RD_WRN = 1 → lectura
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	613b      	str	r3, [r7, #16]
	    tmpreg |= (0 << I2C_CR2_ADD10);            // ADD10 = 0 (7-bit)
	    tmpreg |= (0 << I2C_CR2_HEAD10R);            // HEAD10R = 0
	    tmpreg |= (Len << I2C_CR2_NBYTES);          // NBYTES[7:0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
	    tmpreg |= (1 << I2C_CR2_AUTOEND);            // AUTOEND = 1 (genera STOP automáticamente)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e34:	613b      	str	r3, [r7, #16]
	    tmpreg |= (1 << I2C_CR2_START);            // START = 1
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e3c:	613b      	str	r3, [r7, #16]

	    pI2Cx->CR2 |= tmpreg;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	605a      	str	r2, [r3, #4]

	    // 4. Leer los datos entrantes
	    for (uint32_t i = 0; i < Len; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e010      	b.n	8000e72 <I2C_MasterReceiveData+0x8a>
	    {
	        // Esperar a que RXNE esté seteado (data disponible)
	        while (!(pI2Cx->ISR & (1<<I2C_ISR_RXNE)));
 8000e50:	bf00      	nop
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <I2C_MasterReceiveData+0x6a>

	        // Leer byte recibido
	        pRxBuffer[i] = pI2Cx->RXDR;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	4413      	add	r3, r2
 8000e68:	b2ca      	uxtb	r2, r1
 8000e6a:	701a      	strb	r2, [r3, #0]
	    for (uint32_t i = 0; i < Len; i++)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3ea      	bcc.n	8000e50 <I2C_MasterReceiveData+0x68>
	    }

	    // 5. Esperar a que se genere el STOP (transferencia finalizada)
	    while (!(pI2Cx->ISR & I2C_ISR_STOPF));
 8000e7a:	bf00      	nop
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0305 	and.w	r3, r3, #5
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <I2C_MasterReceiveData+0x94>

	    // 6. Limpiar el flag STOPF
	    pI2Cx->ICR |= (1<< 5);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	f043 0220 	orr.w	r2, r3, #32
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	61da      	str	r2, [r3, #28]
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	fd00c000 	.word	0xfd00c000

08000ea4 <USART_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d136      	bne.n	8000f24 <USART_PeriClockControl+0x80>
		{
			if(pUSARTx==USART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a3a      	ldr	r2, [pc, #232]	; (8000fa4 <USART_PeriClockControl+0x100>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d106      	bne.n	8000ecc <USART_PeriClockControl+0x28>
			{
				USART1_PCLK_EN();
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a39      	ldr	r2, [pc, #228]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
			}else if (pUSARTx==UART5)
			{
				UART5_PCLK_DI();
			}
		}
}
 8000eca:	e064      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==USART2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a37      	ldr	r2, [pc, #220]	; (8000fac <USART_PeriClockControl+0x108>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <USART_PeriClockControl+0x3e>
				USART2_PCLK_EN();
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ee0:	e059      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==USART3)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <USART_PeriClockControl+0x10c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <USART_PeriClockControl+0x54>
				USART1_PCLK_EN();
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000ef6:	e04e      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==UART4)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <USART_PeriClockControl+0x110>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d106      	bne.n	8000f0e <USART_PeriClockControl+0x6a>
				UART4_PCLK_EN();
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f0c:	e043      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==UART5)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <USART_PeriClockControl+0x114>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d13f      	bne.n	8000f96 <USART_PeriClockControl+0xf2>
				UART5_PCLK_EN();
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f22:	e038      	b.n	8000f96 <USART_PeriClockControl+0xf2>
		}else if(EnorDi==DISABLE)
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d135      	bne.n	8000f96 <USART_PeriClockControl+0xf2>
			if(pUSARTx==USART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <USART_PeriClockControl+0x100>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <USART_PeriClockControl+0x9c>
				USART1_PCLK_DI();
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000f3e:	e02a      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==USART2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <USART_PeriClockControl+0x108>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <USART_PeriClockControl+0xb2>
				USART2_PCLK_DI();
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f54:	e01f      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <USART_PeriClockControl+0x10c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <USART_PeriClockControl+0xc8>
				USART1_PCLK_DI();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000f6a:	e014      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==UART4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <USART_PeriClockControl+0x110>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <USART_PeriClockControl+0xde>
				UART4_PCLK_DI();
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f7a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f7e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f80:	e009      	b.n	8000f96 <USART_PeriClockControl+0xf2>
			}else if (pUSARTx==UART5)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <USART_PeriClockControl+0x114>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d105      	bne.n	8000f96 <USART_PeriClockControl+0xf2>
				UART5_PCLK_DI();
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <USART_PeriClockControl+0x104>)
 8000f90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	40004c00 	.word	0x40004c00
 8000fb8:	40005000 	.word	0x40005000

08000fbc <USART_Init>:
	 * @return            -
	 *
	 * @Note              - Resolve all the TODOs

	 */
	{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

		//Temporary variable
		uint32_t tempreg=0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

		//Implement the code to enable the Clock for given USART peripheral
		USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff68 	bl	8000ea4 <USART_PeriClockControl>


		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <USART_Init+0x2a>
		{
			//Implement the code to enable the Receiver bit field
			tempreg|= (1 << USART_CR1_RE);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e010      	b.n	8001008 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <USART_Init+0x3c>
		{
			//Implement the code to enable the Transmitter bit field
			tempreg |= ( 1 << USART_CR1_TE );
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e007      	b.n	8001008 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d103      	bne.n	8001008 <USART_Init+0x4c>
		{
			//Implement the code to enable the both Transmitter and Receiver bit fields
			tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 030c 	orr.w	r3, r3, #12
 8001006:	60fb      	str	r3, [r7, #12]
		}

	    //Implement the code to configure the Word length configuration item
		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M0 ;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7b5b      	ldrb	r3, [r3, #13]
 800100c:	031b      	lsls	r3, r3, #12
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]


	    //Configuration of parity control bit fields
		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7b9b      	ldrb	r3, [r3, #14]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d104      	bne.n	8001028 <USART_Init+0x6c>
		{
			//Implement the code to enable the parity control
			tempreg |= ( 1 << USART_CR1_PCE);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00b      	b.n	8001040 <USART_Init+0x84>

			//Implement the code to enable EVEN parity
			//Not required because by default EVEN parity will be selected once you enable the parity control

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b9b      	ldrb	r3, [r3, #14]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d107      	bne.n	8001040 <USART_Init+0x84>
		{
			//Implement the code to enable the parity control
		    tempreg |= ( 1 << USART_CR1_PCE);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	60fb      	str	r3, [r7, #12]

		    //Implement the code to enable ODD parity
		    tempreg |= ( 1 << USART_CR1_PS);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	60fb      	str	r3, [r7, #12]

		}

	   //Program the CR1 register
		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	601a      	str	r2, [r3, #0]

	/******************************** Configuration of CR2******************************************/

		tempreg=0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b1b      	ldrb	r3, [r3, #12]
 8001050:	031b      	lsls	r3, r3, #12
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		pUSARTHandle->pUSARTx->CR2= tempreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]

	/******************************** Configuration of CR3******************************************/

		tempreg=0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7bdb      	ldrb	r3, [r3, #15]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d104      	bne.n	8001078 <USART_Init+0xbc>
		{
			//Implement the code to enable CTS flow control
			tempreg |= ( 1 << USART_CR3_CTSE);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e010      	b.n	800109a <USART_Init+0xde>


		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7bdb      	ldrb	r3, [r3, #15]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d104      	bne.n	800108a <USART_Init+0xce>
		{
			//Implement the code to enable RTS flow control
			tempreg |= (1 << USART_CR3_RTSE);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e007      	b.n	800109a <USART_Init+0xde>

		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7bdb      	ldrb	r3, [r3, #15]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d103      	bne.n	800109a <USART_Init+0xde>
		{
			//Implement the code to enable both CTS and RTS Flow control
			tempreg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001098:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR3 = tempreg;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	609a      	str	r2, [r3, #8]
	/******************************** Configuration of BRR(Baudrate register)******************************************/

		//Implement the code to configure the baud rate
		//We will cover this in the lecture. No action required here

	}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <USART_GetFlagStatus>:
				}
}


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	if (pUSARTx->ISR & FlagName)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e031      	b.n	8001148 <USART_SendData+0x76>
	{	//aca quedamos
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_ISR_TXE));
 80010e4:	bf00      	nop
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2107      	movs	r1, #7
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffdc 	bl	80010aa <USART_GetFlagStatus>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f6      	beq.n	80010e6 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7b5b      	ldrb	r3, [r3, #13]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d118      	bne.n	8001132 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001112:	629a      	str	r2, [r3, #40]	; 0x28

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	7b9b      	ldrb	r3, [r3, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3301      	adds	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	e00b      	b.n	8001142 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3301      	adds	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e007      	b.n	8001142 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28

			//Implement the code to increment the buffer address
			pTxBuffer++;  //TODO
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3c9      	bcc.n	80010e4 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_ISR_TC));
 8001150:	bf00      	nop
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2106      	movs	r1, #6
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffa6 	bl	80010aa <USART_GetFlagStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f6      	beq.n	8001152 <USART_SendData+0x80>
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <siprintf>:
 8001170:	b40e      	push	{r1, r2, r3}
 8001172:	b500      	push	{lr}
 8001174:	b09c      	sub	sp, #112	; 0x70
 8001176:	ab1d      	add	r3, sp, #116	; 0x74
 8001178:	9002      	str	r0, [sp, #8]
 800117a:	9006      	str	r0, [sp, #24]
 800117c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <siprintf+0x38>)
 8001182:	9107      	str	r1, [sp, #28]
 8001184:	9104      	str	r1, [sp, #16]
 8001186:	4909      	ldr	r1, [pc, #36]	; (80011ac <siprintf+0x3c>)
 8001188:	f853 2b04 	ldr.w	r2, [r3], #4
 800118c:	9105      	str	r1, [sp, #20]
 800118e:	6800      	ldr	r0, [r0, #0]
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	a902      	add	r1, sp, #8
 8001194:	f000 f98a 	bl	80014ac <_svfiprintf_r>
 8001198:	9b02      	ldr	r3, [sp, #8]
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	b01c      	add	sp, #112	; 0x70
 80011a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80011a4:	b003      	add	sp, #12
 80011a6:	4770      	bx	lr
 80011a8:	2000004c 	.word	0x2000004c
 80011ac:	ffff0208 	.word	0xffff0208

080011b0 <__errno>:
 80011b0:	4b01      	ldr	r3, [pc, #4]	; (80011b8 <__errno+0x8>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000004c 	.word	0x2000004c

080011bc <__libc_init_array>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	4d0d      	ldr	r5, [pc, #52]	; (80011f4 <__libc_init_array+0x38>)
 80011c0:	4c0d      	ldr	r4, [pc, #52]	; (80011f8 <__libc_init_array+0x3c>)
 80011c2:	1b64      	subs	r4, r4, r5
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	2600      	movs	r6, #0
 80011c8:	42a6      	cmp	r6, r4
 80011ca:	d109      	bne.n	80011e0 <__libc_init_array+0x24>
 80011cc:	4d0b      	ldr	r5, [pc, #44]	; (80011fc <__libc_init_array+0x40>)
 80011ce:	4c0c      	ldr	r4, [pc, #48]	; (8001200 <__libc_init_array+0x44>)
 80011d0:	f000 fc6a 	bl	8001aa8 <_init>
 80011d4:	1b64      	subs	r4, r4, r5
 80011d6:	10a4      	asrs	r4, r4, #2
 80011d8:	2600      	movs	r6, #0
 80011da:	42a6      	cmp	r6, r4
 80011dc:	d105      	bne.n	80011ea <__libc_init_array+0x2e>
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011e4:	4798      	blx	r3
 80011e6:	3601      	adds	r6, #1
 80011e8:	e7ee      	b.n	80011c8 <__libc_init_array+0xc>
 80011ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ee:	4798      	blx	r3
 80011f0:	3601      	adds	r6, #1
 80011f2:	e7f2      	b.n	80011da <__libc_init_array+0x1e>
 80011f4:	08001b10 	.word	0x08001b10
 80011f8:	08001b10 	.word	0x08001b10
 80011fc:	08001b10 	.word	0x08001b10
 8001200:	08001b14 	.word	0x08001b14

08001204 <__retarget_lock_acquire_recursive>:
 8001204:	4770      	bx	lr

08001206 <__retarget_lock_release_recursive>:
 8001206:	4770      	bx	lr

08001208 <_free_r>:
 8001208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800120a:	2900      	cmp	r1, #0
 800120c:	d044      	beq.n	8001298 <_free_r+0x90>
 800120e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001212:	9001      	str	r0, [sp, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f1a1 0404 	sub.w	r4, r1, #4
 800121a:	bfb8      	it	lt
 800121c:	18e4      	addlt	r4, r4, r3
 800121e:	f000 f8df 	bl	80013e0 <__malloc_lock>
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <_free_r+0x94>)
 8001224:	9801      	ldr	r0, [sp, #4]
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	b933      	cbnz	r3, 8001238 <_free_r+0x30>
 800122a:	6063      	str	r3, [r4, #4]
 800122c:	6014      	str	r4, [r2, #0]
 800122e:	b003      	add	sp, #12
 8001230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001234:	f000 b8da 	b.w	80013ec <__malloc_unlock>
 8001238:	42a3      	cmp	r3, r4
 800123a:	d908      	bls.n	800124e <_free_r+0x46>
 800123c:	6825      	ldr	r5, [r4, #0]
 800123e:	1961      	adds	r1, r4, r5
 8001240:	428b      	cmp	r3, r1
 8001242:	bf01      	itttt	eq
 8001244:	6819      	ldreq	r1, [r3, #0]
 8001246:	685b      	ldreq	r3, [r3, #4]
 8001248:	1949      	addeq	r1, r1, r5
 800124a:	6021      	streq	r1, [r4, #0]
 800124c:	e7ed      	b.n	800122a <_free_r+0x22>
 800124e:	461a      	mov	r2, r3
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	b10b      	cbz	r3, 8001258 <_free_r+0x50>
 8001254:	42a3      	cmp	r3, r4
 8001256:	d9fa      	bls.n	800124e <_free_r+0x46>
 8001258:	6811      	ldr	r1, [r2, #0]
 800125a:	1855      	adds	r5, r2, r1
 800125c:	42a5      	cmp	r5, r4
 800125e:	d10b      	bne.n	8001278 <_free_r+0x70>
 8001260:	6824      	ldr	r4, [r4, #0]
 8001262:	4421      	add	r1, r4
 8001264:	1854      	adds	r4, r2, r1
 8001266:	42a3      	cmp	r3, r4
 8001268:	6011      	str	r1, [r2, #0]
 800126a:	d1e0      	bne.n	800122e <_free_r+0x26>
 800126c:	681c      	ldr	r4, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	440c      	add	r4, r1
 8001274:	6014      	str	r4, [r2, #0]
 8001276:	e7da      	b.n	800122e <_free_r+0x26>
 8001278:	d902      	bls.n	8001280 <_free_r+0x78>
 800127a:	230c      	movs	r3, #12
 800127c:	6003      	str	r3, [r0, #0]
 800127e:	e7d6      	b.n	800122e <_free_r+0x26>
 8001280:	6825      	ldr	r5, [r4, #0]
 8001282:	1961      	adds	r1, r4, r5
 8001284:	428b      	cmp	r3, r1
 8001286:	bf04      	itt	eq
 8001288:	6819      	ldreq	r1, [r3, #0]
 800128a:	685b      	ldreq	r3, [r3, #4]
 800128c:	6063      	str	r3, [r4, #4]
 800128e:	bf04      	itt	eq
 8001290:	1949      	addeq	r1, r1, r5
 8001292:	6021      	streq	r1, [r4, #0]
 8001294:	6054      	str	r4, [r2, #4]
 8001296:	e7ca      	b.n	800122e <_free_r+0x26>
 8001298:	b003      	add	sp, #12
 800129a:	bd30      	pop	{r4, r5, pc}
 800129c:	200001d0 	.word	0x200001d0

080012a0 <sbrk_aligned>:
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	4e0e      	ldr	r6, [pc, #56]	; (80012dc <sbrk_aligned+0x3c>)
 80012a4:	460c      	mov	r4, r1
 80012a6:	6831      	ldr	r1, [r6, #0]
 80012a8:	4605      	mov	r5, r0
 80012aa:	b911      	cbnz	r1, 80012b2 <sbrk_aligned+0x12>
 80012ac:	f000 fba6 	bl	80019fc <_sbrk_r>
 80012b0:	6030      	str	r0, [r6, #0]
 80012b2:	4621      	mov	r1, r4
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 fba1 	bl	80019fc <_sbrk_r>
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	d00a      	beq.n	80012d4 <sbrk_aligned+0x34>
 80012be:	1cc4      	adds	r4, r0, #3
 80012c0:	f024 0403 	bic.w	r4, r4, #3
 80012c4:	42a0      	cmp	r0, r4
 80012c6:	d007      	beq.n	80012d8 <sbrk_aligned+0x38>
 80012c8:	1a21      	subs	r1, r4, r0
 80012ca:	4628      	mov	r0, r5
 80012cc:	f000 fb96 	bl	80019fc <_sbrk_r>
 80012d0:	3001      	adds	r0, #1
 80012d2:	d101      	bne.n	80012d8 <sbrk_aligned+0x38>
 80012d4:	f04f 34ff 	mov.w	r4, #4294967295
 80012d8:	4620      	mov	r0, r4
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	200001d4 	.word	0x200001d4

080012e0 <_malloc_r>:
 80012e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012e4:	1ccd      	adds	r5, r1, #3
 80012e6:	f025 0503 	bic.w	r5, r5, #3
 80012ea:	3508      	adds	r5, #8
 80012ec:	2d0c      	cmp	r5, #12
 80012ee:	bf38      	it	cc
 80012f0:	250c      	movcc	r5, #12
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	4607      	mov	r7, r0
 80012f6:	db01      	blt.n	80012fc <_malloc_r+0x1c>
 80012f8:	42a9      	cmp	r1, r5
 80012fa:	d905      	bls.n	8001308 <_malloc_r+0x28>
 80012fc:	230c      	movs	r3, #12
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	2600      	movs	r6, #0
 8001302:	4630      	mov	r0, r6
 8001304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013dc <_malloc_r+0xfc>
 800130c:	f000 f868 	bl	80013e0 <__malloc_lock>
 8001310:	f8d8 3000 	ldr.w	r3, [r8]
 8001314:	461c      	mov	r4, r3
 8001316:	bb5c      	cbnz	r4, 8001370 <_malloc_r+0x90>
 8001318:	4629      	mov	r1, r5
 800131a:	4638      	mov	r0, r7
 800131c:	f7ff ffc0 	bl	80012a0 <sbrk_aligned>
 8001320:	1c43      	adds	r3, r0, #1
 8001322:	4604      	mov	r4, r0
 8001324:	d155      	bne.n	80013d2 <_malloc_r+0xf2>
 8001326:	f8d8 4000 	ldr.w	r4, [r8]
 800132a:	4626      	mov	r6, r4
 800132c:	2e00      	cmp	r6, #0
 800132e:	d145      	bne.n	80013bc <_malloc_r+0xdc>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d048      	beq.n	80013c6 <_malloc_r+0xe6>
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	4631      	mov	r1, r6
 8001338:	4638      	mov	r0, r7
 800133a:	eb04 0903 	add.w	r9, r4, r3
 800133e:	f000 fb5d 	bl	80019fc <_sbrk_r>
 8001342:	4581      	cmp	r9, r0
 8001344:	d13f      	bne.n	80013c6 <_malloc_r+0xe6>
 8001346:	6821      	ldr	r1, [r4, #0]
 8001348:	1a6d      	subs	r5, r5, r1
 800134a:	4629      	mov	r1, r5
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff ffa7 	bl	80012a0 <sbrk_aligned>
 8001352:	3001      	adds	r0, #1
 8001354:	d037      	beq.n	80013c6 <_malloc_r+0xe6>
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	442b      	add	r3, r5
 800135a:	6023      	str	r3, [r4, #0]
 800135c:	f8d8 3000 	ldr.w	r3, [r8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d038      	beq.n	80013d6 <_malloc_r+0xf6>
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	42a2      	cmp	r2, r4
 8001368:	d12b      	bne.n	80013c2 <_malloc_r+0xe2>
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	e00f      	b.n	8001390 <_malloc_r+0xb0>
 8001370:	6822      	ldr	r2, [r4, #0]
 8001372:	1b52      	subs	r2, r2, r5
 8001374:	d41f      	bmi.n	80013b6 <_malloc_r+0xd6>
 8001376:	2a0b      	cmp	r2, #11
 8001378:	d917      	bls.n	80013aa <_malloc_r+0xca>
 800137a:	1961      	adds	r1, r4, r5
 800137c:	42a3      	cmp	r3, r4
 800137e:	6025      	str	r5, [r4, #0]
 8001380:	bf18      	it	ne
 8001382:	6059      	strne	r1, [r3, #4]
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	bf08      	it	eq
 8001388:	f8c8 1000 	streq.w	r1, [r8]
 800138c:	5162      	str	r2, [r4, r5]
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	4638      	mov	r0, r7
 8001392:	f104 060b 	add.w	r6, r4, #11
 8001396:	f000 f829 	bl	80013ec <__malloc_unlock>
 800139a:	f026 0607 	bic.w	r6, r6, #7
 800139e:	1d23      	adds	r3, r4, #4
 80013a0:	1af2      	subs	r2, r6, r3
 80013a2:	d0ae      	beq.n	8001302 <_malloc_r+0x22>
 80013a4:	1b9b      	subs	r3, r3, r6
 80013a6:	50a3      	str	r3, [r4, r2]
 80013a8:	e7ab      	b.n	8001302 <_malloc_r+0x22>
 80013aa:	42a3      	cmp	r3, r4
 80013ac:	6862      	ldr	r2, [r4, #4]
 80013ae:	d1dd      	bne.n	800136c <_malloc_r+0x8c>
 80013b0:	f8c8 2000 	str.w	r2, [r8]
 80013b4:	e7ec      	b.n	8001390 <_malloc_r+0xb0>
 80013b6:	4623      	mov	r3, r4
 80013b8:	6864      	ldr	r4, [r4, #4]
 80013ba:	e7ac      	b.n	8001316 <_malloc_r+0x36>
 80013bc:	4634      	mov	r4, r6
 80013be:	6876      	ldr	r6, [r6, #4]
 80013c0:	e7b4      	b.n	800132c <_malloc_r+0x4c>
 80013c2:	4613      	mov	r3, r2
 80013c4:	e7cc      	b.n	8001360 <_malloc_r+0x80>
 80013c6:	230c      	movs	r3, #12
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4638      	mov	r0, r7
 80013cc:	f000 f80e 	bl	80013ec <__malloc_unlock>
 80013d0:	e797      	b.n	8001302 <_malloc_r+0x22>
 80013d2:	6025      	str	r5, [r4, #0]
 80013d4:	e7dc      	b.n	8001390 <_malloc_r+0xb0>
 80013d6:	605b      	str	r3, [r3, #4]
 80013d8:	deff      	udf	#255	; 0xff
 80013da:	bf00      	nop
 80013dc:	200001d0 	.word	0x200001d0

080013e0 <__malloc_lock>:
 80013e0:	4801      	ldr	r0, [pc, #4]	; (80013e8 <__malloc_lock+0x8>)
 80013e2:	f7ff bf0f 	b.w	8001204 <__retarget_lock_acquire_recursive>
 80013e6:	bf00      	nop
 80013e8:	200001cc 	.word	0x200001cc

080013ec <__malloc_unlock>:
 80013ec:	4801      	ldr	r0, [pc, #4]	; (80013f4 <__malloc_unlock+0x8>)
 80013ee:	f7ff bf0a 	b.w	8001206 <__retarget_lock_release_recursive>
 80013f2:	bf00      	nop
 80013f4:	200001cc 	.word	0x200001cc

080013f8 <__ssputs_r>:
 80013f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013fc:	688e      	ldr	r6, [r1, #8]
 80013fe:	461f      	mov	r7, r3
 8001400:	42be      	cmp	r6, r7
 8001402:	680b      	ldr	r3, [r1, #0]
 8001404:	4682      	mov	sl, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4690      	mov	r8, r2
 800140a:	d82c      	bhi.n	8001466 <__ssputs_r+0x6e>
 800140c:	898a      	ldrh	r2, [r1, #12]
 800140e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001412:	d026      	beq.n	8001462 <__ssputs_r+0x6a>
 8001414:	6965      	ldr	r5, [r4, #20]
 8001416:	6909      	ldr	r1, [r1, #16]
 8001418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800141c:	eba3 0901 	sub.w	r9, r3, r1
 8001420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001424:	1c7b      	adds	r3, r7, #1
 8001426:	444b      	add	r3, r9
 8001428:	106d      	asrs	r5, r5, #1
 800142a:	429d      	cmp	r5, r3
 800142c:	bf38      	it	cc
 800142e:	461d      	movcc	r5, r3
 8001430:	0553      	lsls	r3, r2, #21
 8001432:	d527      	bpl.n	8001484 <__ssputs_r+0x8c>
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff ff53 	bl	80012e0 <_malloc_r>
 800143a:	4606      	mov	r6, r0
 800143c:	b360      	cbz	r0, 8001498 <__ssputs_r+0xa0>
 800143e:	6921      	ldr	r1, [r4, #16]
 8001440:	464a      	mov	r2, r9
 8001442:	f000 faeb 	bl	8001a1c <memcpy>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	6126      	str	r6, [r4, #16]
 8001454:	6165      	str	r5, [r4, #20]
 8001456:	444e      	add	r6, r9
 8001458:	eba5 0509 	sub.w	r5, r5, r9
 800145c:	6026      	str	r6, [r4, #0]
 800145e:	60a5      	str	r5, [r4, #8]
 8001460:	463e      	mov	r6, r7
 8001462:	42be      	cmp	r6, r7
 8001464:	d900      	bls.n	8001468 <__ssputs_r+0x70>
 8001466:	463e      	mov	r6, r7
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	4632      	mov	r2, r6
 800146c:	4641      	mov	r1, r8
 800146e:	f000 faab 	bl	80019c8 <memmove>
 8001472:	68a3      	ldr	r3, [r4, #8]
 8001474:	1b9b      	subs	r3, r3, r6
 8001476:	60a3      	str	r3, [r4, #8]
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	4433      	add	r3, r6
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	2000      	movs	r0, #0
 8001480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001484:	462a      	mov	r2, r5
 8001486:	f000 fad7 	bl	8001a38 <_realloc_r>
 800148a:	4606      	mov	r6, r0
 800148c:	2800      	cmp	r0, #0
 800148e:	d1e0      	bne.n	8001452 <__ssputs_r+0x5a>
 8001490:	6921      	ldr	r1, [r4, #16]
 8001492:	4650      	mov	r0, sl
 8001494:	f7ff feb8 	bl	8001208 <_free_r>
 8001498:	230c      	movs	r3, #12
 800149a:	f8ca 3000 	str.w	r3, [sl]
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	81a3      	strh	r3, [r4, #12]
 80014a6:	f04f 30ff 	mov.w	r0, #4294967295
 80014aa:	e7e9      	b.n	8001480 <__ssputs_r+0x88>

080014ac <_svfiprintf_r>:
 80014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b0:	4698      	mov	r8, r3
 80014b2:	898b      	ldrh	r3, [r1, #12]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	b09d      	sub	sp, #116	; 0x74
 80014b8:	4607      	mov	r7, r0
 80014ba:	460d      	mov	r5, r1
 80014bc:	4614      	mov	r4, r2
 80014be:	d50e      	bpl.n	80014de <_svfiprintf_r+0x32>
 80014c0:	690b      	ldr	r3, [r1, #16]
 80014c2:	b963      	cbnz	r3, 80014de <_svfiprintf_r+0x32>
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	f7ff ff0b 	bl	80012e0 <_malloc_r>
 80014ca:	6028      	str	r0, [r5, #0]
 80014cc:	6128      	str	r0, [r5, #16]
 80014ce:	b920      	cbnz	r0, 80014da <_svfiprintf_r+0x2e>
 80014d0:	230c      	movs	r3, #12
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	e0d0      	b.n	800167c <_svfiprintf_r+0x1d0>
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	616b      	str	r3, [r5, #20]
 80014de:	2300      	movs	r3, #0
 80014e0:	9309      	str	r3, [sp, #36]	; 0x24
 80014e2:	2320      	movs	r3, #32
 80014e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80014ec:	2330      	movs	r3, #48	; 0x30
 80014ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001694 <_svfiprintf_r+0x1e8>
 80014f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014f6:	f04f 0901 	mov.w	r9, #1
 80014fa:	4623      	mov	r3, r4
 80014fc:	469a      	mov	sl, r3
 80014fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001502:	b10a      	cbz	r2, 8001508 <_svfiprintf_r+0x5c>
 8001504:	2a25      	cmp	r2, #37	; 0x25
 8001506:	d1f9      	bne.n	80014fc <_svfiprintf_r+0x50>
 8001508:	ebba 0b04 	subs.w	fp, sl, r4
 800150c:	d00b      	beq.n	8001526 <_svfiprintf_r+0x7a>
 800150e:	465b      	mov	r3, fp
 8001510:	4622      	mov	r2, r4
 8001512:	4629      	mov	r1, r5
 8001514:	4638      	mov	r0, r7
 8001516:	f7ff ff6f 	bl	80013f8 <__ssputs_r>
 800151a:	3001      	adds	r0, #1
 800151c:	f000 80a9 	beq.w	8001672 <_svfiprintf_r+0x1c6>
 8001520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001522:	445a      	add	r2, fp
 8001524:	9209      	str	r2, [sp, #36]	; 0x24
 8001526:	f89a 3000 	ldrb.w	r3, [sl]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80a1 	beq.w	8001672 <_svfiprintf_r+0x1c6>
 8001530:	2300      	movs	r3, #0
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800153a:	f10a 0a01 	add.w	sl, sl, #1
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	9307      	str	r3, [sp, #28]
 8001542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001546:	931a      	str	r3, [sp, #104]	; 0x68
 8001548:	4654      	mov	r4, sl
 800154a:	2205      	movs	r2, #5
 800154c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001550:	4850      	ldr	r0, [pc, #320]	; (8001694 <_svfiprintf_r+0x1e8>)
 8001552:	f7fe fe4d 	bl	80001f0 <memchr>
 8001556:	9a04      	ldr	r2, [sp, #16]
 8001558:	b9d8      	cbnz	r0, 8001592 <_svfiprintf_r+0xe6>
 800155a:	06d0      	lsls	r0, r2, #27
 800155c:	bf44      	itt	mi
 800155e:	2320      	movmi	r3, #32
 8001560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001564:	0711      	lsls	r1, r2, #28
 8001566:	bf44      	itt	mi
 8001568:	232b      	movmi	r3, #43	; 0x2b
 800156a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800156e:	f89a 3000 	ldrb.w	r3, [sl]
 8001572:	2b2a      	cmp	r3, #42	; 0x2a
 8001574:	d015      	beq.n	80015a2 <_svfiprintf_r+0xf6>
 8001576:	9a07      	ldr	r2, [sp, #28]
 8001578:	4654      	mov	r4, sl
 800157a:	2000      	movs	r0, #0
 800157c:	f04f 0c0a 	mov.w	ip, #10
 8001580:	4621      	mov	r1, r4
 8001582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001586:	3b30      	subs	r3, #48	; 0x30
 8001588:	2b09      	cmp	r3, #9
 800158a:	d94d      	bls.n	8001628 <_svfiprintf_r+0x17c>
 800158c:	b1b0      	cbz	r0, 80015bc <_svfiprintf_r+0x110>
 800158e:	9207      	str	r2, [sp, #28]
 8001590:	e014      	b.n	80015bc <_svfiprintf_r+0x110>
 8001592:	eba0 0308 	sub.w	r3, r0, r8
 8001596:	fa09 f303 	lsl.w	r3, r9, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	9304      	str	r3, [sp, #16]
 800159e:	46a2      	mov	sl, r4
 80015a0:	e7d2      	b.n	8001548 <_svfiprintf_r+0x9c>
 80015a2:	9b03      	ldr	r3, [sp, #12]
 80015a4:	1d19      	adds	r1, r3, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	9103      	str	r1, [sp, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bfbb      	ittet	lt
 80015ae:	425b      	neglt	r3, r3
 80015b0:	f042 0202 	orrlt.w	r2, r2, #2
 80015b4:	9307      	strge	r3, [sp, #28]
 80015b6:	9307      	strlt	r3, [sp, #28]
 80015b8:	bfb8      	it	lt
 80015ba:	9204      	strlt	r2, [sp, #16]
 80015bc:	7823      	ldrb	r3, [r4, #0]
 80015be:	2b2e      	cmp	r3, #46	; 0x2e
 80015c0:	d10c      	bne.n	80015dc <_svfiprintf_r+0x130>
 80015c2:	7863      	ldrb	r3, [r4, #1]
 80015c4:	2b2a      	cmp	r3, #42	; 0x2a
 80015c6:	d134      	bne.n	8001632 <_svfiprintf_r+0x186>
 80015c8:	9b03      	ldr	r3, [sp, #12]
 80015ca:	1d1a      	adds	r2, r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	9203      	str	r2, [sp, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfb8      	it	lt
 80015d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80015d8:	3402      	adds	r4, #2
 80015da:	9305      	str	r3, [sp, #20]
 80015dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80016a4 <_svfiprintf_r+0x1f8>
 80015e0:	7821      	ldrb	r1, [r4, #0]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4650      	mov	r0, sl
 80015e6:	f7fe fe03 	bl	80001f0 <memchr>
 80015ea:	b138      	cbz	r0, 80015fc <_svfiprintf_r+0x150>
 80015ec:	9b04      	ldr	r3, [sp, #16]
 80015ee:	eba0 000a 	sub.w	r0, r0, sl
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	4082      	lsls	r2, r0
 80015f6:	4313      	orrs	r3, r2
 80015f8:	3401      	adds	r4, #1
 80015fa:	9304      	str	r3, [sp, #16]
 80015fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001600:	4825      	ldr	r0, [pc, #148]	; (8001698 <_svfiprintf_r+0x1ec>)
 8001602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001606:	2206      	movs	r2, #6
 8001608:	f7fe fdf2 	bl	80001f0 <memchr>
 800160c:	2800      	cmp	r0, #0
 800160e:	d038      	beq.n	8001682 <_svfiprintf_r+0x1d6>
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <_svfiprintf_r+0x1f0>)
 8001612:	bb1b      	cbnz	r3, 800165c <_svfiprintf_r+0x1b0>
 8001614:	9b03      	ldr	r3, [sp, #12]
 8001616:	3307      	adds	r3, #7
 8001618:	f023 0307 	bic.w	r3, r3, #7
 800161c:	3308      	adds	r3, #8
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001622:	4433      	add	r3, r6
 8001624:	9309      	str	r3, [sp, #36]	; 0x24
 8001626:	e768      	b.n	80014fa <_svfiprintf_r+0x4e>
 8001628:	fb0c 3202 	mla	r2, ip, r2, r3
 800162c:	460c      	mov	r4, r1
 800162e:	2001      	movs	r0, #1
 8001630:	e7a6      	b.n	8001580 <_svfiprintf_r+0xd4>
 8001632:	2300      	movs	r3, #0
 8001634:	3401      	adds	r4, #1
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0c0a 	mov.w	ip, #10
 800163e:	4620      	mov	r0, r4
 8001640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001644:	3a30      	subs	r2, #48	; 0x30
 8001646:	2a09      	cmp	r2, #9
 8001648:	d903      	bls.n	8001652 <_svfiprintf_r+0x1a6>
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0c6      	beq.n	80015dc <_svfiprintf_r+0x130>
 800164e:	9105      	str	r1, [sp, #20]
 8001650:	e7c4      	b.n	80015dc <_svfiprintf_r+0x130>
 8001652:	fb0c 2101 	mla	r1, ip, r1, r2
 8001656:	4604      	mov	r4, r0
 8001658:	2301      	movs	r3, #1
 800165a:	e7f0      	b.n	800163e <_svfiprintf_r+0x192>
 800165c:	ab03      	add	r3, sp, #12
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	462a      	mov	r2, r5
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <_svfiprintf_r+0x1f4>)
 8001664:	a904      	add	r1, sp, #16
 8001666:	4638      	mov	r0, r7
 8001668:	f3af 8000 	nop.w
 800166c:	1c42      	adds	r2, r0, #1
 800166e:	4606      	mov	r6, r0
 8001670:	d1d6      	bne.n	8001620 <_svfiprintf_r+0x174>
 8001672:	89ab      	ldrh	r3, [r5, #12]
 8001674:	065b      	lsls	r3, r3, #25
 8001676:	f53f af2d 	bmi.w	80014d4 <_svfiprintf_r+0x28>
 800167a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800167c:	b01d      	add	sp, #116	; 0x74
 800167e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001682:	ab03      	add	r3, sp, #12
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	462a      	mov	r2, r5
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <_svfiprintf_r+0x1f4>)
 800168a:	a904      	add	r1, sp, #16
 800168c:	4638      	mov	r0, r7
 800168e:	f000 f879 	bl	8001784 <_printf_i>
 8001692:	e7eb      	b.n	800166c <_svfiprintf_r+0x1c0>
 8001694:	08001adc 	.word	0x08001adc
 8001698:	08001ae6 	.word	0x08001ae6
 800169c:	00000000 	.word	0x00000000
 80016a0:	080013f9 	.word	0x080013f9
 80016a4:	08001ae2 	.word	0x08001ae2

080016a8 <_printf_common>:
 80016a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016ac:	4616      	mov	r6, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	688a      	ldr	r2, [r1, #8]
 80016b2:	690b      	ldr	r3, [r1, #16]
 80016b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bfb8      	it	lt
 80016bc:	4613      	movlt	r3, r2
 80016be:	6033      	str	r3, [r6, #0]
 80016c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016c4:	4607      	mov	r7, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	b10a      	cbz	r2, 80016ce <_printf_common+0x26>
 80016ca:	3301      	adds	r3, #1
 80016cc:	6033      	str	r3, [r6, #0]
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	0699      	lsls	r1, r3, #26
 80016d2:	bf42      	ittt	mi
 80016d4:	6833      	ldrmi	r3, [r6, #0]
 80016d6:	3302      	addmi	r3, #2
 80016d8:	6033      	strmi	r3, [r6, #0]
 80016da:	6825      	ldr	r5, [r4, #0]
 80016dc:	f015 0506 	ands.w	r5, r5, #6
 80016e0:	d106      	bne.n	80016f0 <_printf_common+0x48>
 80016e2:	f104 0a19 	add.w	sl, r4, #25
 80016e6:	68e3      	ldr	r3, [r4, #12]
 80016e8:	6832      	ldr	r2, [r6, #0]
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	42ab      	cmp	r3, r5
 80016ee:	dc26      	bgt.n	800173e <_printf_common+0x96>
 80016f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80016f4:	1e13      	subs	r3, r2, #0
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	bf18      	it	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	0692      	lsls	r2, r2, #26
 80016fe:	d42b      	bmi.n	8001758 <_printf_common+0xb0>
 8001700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001704:	4649      	mov	r1, r9
 8001706:	4638      	mov	r0, r7
 8001708:	47c0      	blx	r8
 800170a:	3001      	adds	r0, #1
 800170c:	d01e      	beq.n	800174c <_printf_common+0xa4>
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	6922      	ldr	r2, [r4, #16]
 8001712:	f003 0306 	and.w	r3, r3, #6
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf02      	ittt	eq
 800171a:	68e5      	ldreq	r5, [r4, #12]
 800171c:	6833      	ldreq	r3, [r6, #0]
 800171e:	1aed      	subeq	r5, r5, r3
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	bf0c      	ite	eq
 8001724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001728:	2500      	movne	r5, #0
 800172a:	4293      	cmp	r3, r2
 800172c:	bfc4      	itt	gt
 800172e:	1a9b      	subgt	r3, r3, r2
 8001730:	18ed      	addgt	r5, r5, r3
 8001732:	2600      	movs	r6, #0
 8001734:	341a      	adds	r4, #26
 8001736:	42b5      	cmp	r5, r6
 8001738:	d11a      	bne.n	8001770 <_printf_common+0xc8>
 800173a:	2000      	movs	r0, #0
 800173c:	e008      	b.n	8001750 <_printf_common+0xa8>
 800173e:	2301      	movs	r3, #1
 8001740:	4652      	mov	r2, sl
 8001742:	4649      	mov	r1, r9
 8001744:	4638      	mov	r0, r7
 8001746:	47c0      	blx	r8
 8001748:	3001      	adds	r0, #1
 800174a:	d103      	bne.n	8001754 <_printf_common+0xac>
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001754:	3501      	adds	r5, #1
 8001756:	e7c6      	b.n	80016e6 <_printf_common+0x3e>
 8001758:	18e1      	adds	r1, r4, r3
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	2030      	movs	r0, #48	; 0x30
 800175e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001762:	4422      	add	r2, r4
 8001764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800176c:	3302      	adds	r3, #2
 800176e:	e7c7      	b.n	8001700 <_printf_common+0x58>
 8001770:	2301      	movs	r3, #1
 8001772:	4622      	mov	r2, r4
 8001774:	4649      	mov	r1, r9
 8001776:	4638      	mov	r0, r7
 8001778:	47c0      	blx	r8
 800177a:	3001      	adds	r0, #1
 800177c:	d0e6      	beq.n	800174c <_printf_common+0xa4>
 800177e:	3601      	adds	r6, #1
 8001780:	e7d9      	b.n	8001736 <_printf_common+0x8e>
	...

08001784 <_printf_i>:
 8001784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001788:	7e0f      	ldrb	r7, [r1, #24]
 800178a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800178c:	2f78      	cmp	r7, #120	; 0x78
 800178e:	4691      	mov	r9, r2
 8001790:	4680      	mov	r8, r0
 8001792:	460c      	mov	r4, r1
 8001794:	469a      	mov	sl, r3
 8001796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800179a:	d807      	bhi.n	80017ac <_printf_i+0x28>
 800179c:	2f62      	cmp	r7, #98	; 0x62
 800179e:	d80a      	bhi.n	80017b6 <_printf_i+0x32>
 80017a0:	2f00      	cmp	r7, #0
 80017a2:	f000 80d4 	beq.w	800194e <_printf_i+0x1ca>
 80017a6:	2f58      	cmp	r7, #88	; 0x58
 80017a8:	f000 80c0 	beq.w	800192c <_printf_i+0x1a8>
 80017ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017b4:	e03a      	b.n	800182c <_printf_i+0xa8>
 80017b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017ba:	2b15      	cmp	r3, #21
 80017bc:	d8f6      	bhi.n	80017ac <_printf_i+0x28>
 80017be:	a101      	add	r1, pc, #4	; (adr r1, 80017c4 <_printf_i+0x40>)
 80017c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001831 	.word	0x08001831
 80017cc:	080017ad 	.word	0x080017ad
 80017d0:	080017ad 	.word	0x080017ad
 80017d4:	080017ad 	.word	0x080017ad
 80017d8:	080017ad 	.word	0x080017ad
 80017dc:	08001831 	.word	0x08001831
 80017e0:	080017ad 	.word	0x080017ad
 80017e4:	080017ad 	.word	0x080017ad
 80017e8:	080017ad 	.word	0x080017ad
 80017ec:	080017ad 	.word	0x080017ad
 80017f0:	08001935 	.word	0x08001935
 80017f4:	0800185d 	.word	0x0800185d
 80017f8:	080018ef 	.word	0x080018ef
 80017fc:	080017ad 	.word	0x080017ad
 8001800:	080017ad 	.word	0x080017ad
 8001804:	08001957 	.word	0x08001957
 8001808:	080017ad 	.word	0x080017ad
 800180c:	0800185d 	.word	0x0800185d
 8001810:	080017ad 	.word	0x080017ad
 8001814:	080017ad 	.word	0x080017ad
 8001818:	080018f7 	.word	0x080018f7
 800181c:	682b      	ldr	r3, [r5, #0]
 800181e:	1d1a      	adds	r2, r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	602a      	str	r2, [r5, #0]
 8001824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800182c:	2301      	movs	r3, #1
 800182e:	e09f      	b.n	8001970 <_printf_i+0x1ec>
 8001830:	6820      	ldr	r0, [r4, #0]
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	0607      	lsls	r7, r0, #24
 8001836:	f103 0104 	add.w	r1, r3, #4
 800183a:	6029      	str	r1, [r5, #0]
 800183c:	d501      	bpl.n	8001842 <_printf_i+0xbe>
 800183e:	681e      	ldr	r6, [r3, #0]
 8001840:	e003      	b.n	800184a <_printf_i+0xc6>
 8001842:	0646      	lsls	r6, r0, #25
 8001844:	d5fb      	bpl.n	800183e <_printf_i+0xba>
 8001846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800184a:	2e00      	cmp	r6, #0
 800184c:	da03      	bge.n	8001856 <_printf_i+0xd2>
 800184e:	232d      	movs	r3, #45	; 0x2d
 8001850:	4276      	negs	r6, r6
 8001852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001856:	485a      	ldr	r0, [pc, #360]	; (80019c0 <_printf_i+0x23c>)
 8001858:	230a      	movs	r3, #10
 800185a:	e012      	b.n	8001882 <_printf_i+0xfe>
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	6820      	ldr	r0, [r4, #0]
 8001860:	1d19      	adds	r1, r3, #4
 8001862:	6029      	str	r1, [r5, #0]
 8001864:	0605      	lsls	r5, r0, #24
 8001866:	d501      	bpl.n	800186c <_printf_i+0xe8>
 8001868:	681e      	ldr	r6, [r3, #0]
 800186a:	e002      	b.n	8001872 <_printf_i+0xee>
 800186c:	0641      	lsls	r1, r0, #25
 800186e:	d5fb      	bpl.n	8001868 <_printf_i+0xe4>
 8001870:	881e      	ldrh	r6, [r3, #0]
 8001872:	4853      	ldr	r0, [pc, #332]	; (80019c0 <_printf_i+0x23c>)
 8001874:	2f6f      	cmp	r7, #111	; 0x6f
 8001876:	bf0c      	ite	eq
 8001878:	2308      	moveq	r3, #8
 800187a:	230a      	movne	r3, #10
 800187c:	2100      	movs	r1, #0
 800187e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001882:	6865      	ldr	r5, [r4, #4]
 8001884:	60a5      	str	r5, [r4, #8]
 8001886:	2d00      	cmp	r5, #0
 8001888:	bfa2      	ittt	ge
 800188a:	6821      	ldrge	r1, [r4, #0]
 800188c:	f021 0104 	bicge.w	r1, r1, #4
 8001890:	6021      	strge	r1, [r4, #0]
 8001892:	b90e      	cbnz	r6, 8001898 <_printf_i+0x114>
 8001894:	2d00      	cmp	r5, #0
 8001896:	d04b      	beq.n	8001930 <_printf_i+0x1ac>
 8001898:	4615      	mov	r5, r2
 800189a:	fbb6 f1f3 	udiv	r1, r6, r3
 800189e:	fb03 6711 	mls	r7, r3, r1, r6
 80018a2:	5dc7      	ldrb	r7, [r0, r7]
 80018a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80018a8:	4637      	mov	r7, r6
 80018aa:	42bb      	cmp	r3, r7
 80018ac:	460e      	mov	r6, r1
 80018ae:	d9f4      	bls.n	800189a <_printf_i+0x116>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d10b      	bne.n	80018cc <_printf_i+0x148>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	07de      	lsls	r6, r3, #31
 80018b8:	d508      	bpl.n	80018cc <_printf_i+0x148>
 80018ba:	6923      	ldr	r3, [r4, #16]
 80018bc:	6861      	ldr	r1, [r4, #4]
 80018be:	4299      	cmp	r1, r3
 80018c0:	bfde      	ittt	le
 80018c2:	2330      	movle	r3, #48	; 0x30
 80018c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018cc:	1b52      	subs	r2, r2, r5
 80018ce:	6122      	str	r2, [r4, #16]
 80018d0:	f8cd a000 	str.w	sl, [sp]
 80018d4:	464b      	mov	r3, r9
 80018d6:	aa03      	add	r2, sp, #12
 80018d8:	4621      	mov	r1, r4
 80018da:	4640      	mov	r0, r8
 80018dc:	f7ff fee4 	bl	80016a8 <_printf_common>
 80018e0:	3001      	adds	r0, #1
 80018e2:	d14a      	bne.n	800197a <_printf_i+0x1f6>
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	b004      	add	sp, #16
 80018ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6023      	str	r3, [r4, #0]
 80018f6:	4833      	ldr	r0, [pc, #204]	; (80019c4 <_printf_i+0x240>)
 80018f8:	2778      	movs	r7, #120	; 0x78
 80018fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	6829      	ldr	r1, [r5, #0]
 8001902:	061f      	lsls	r7, r3, #24
 8001904:	f851 6b04 	ldr.w	r6, [r1], #4
 8001908:	d402      	bmi.n	8001910 <_printf_i+0x18c>
 800190a:	065f      	lsls	r7, r3, #25
 800190c:	bf48      	it	mi
 800190e:	b2b6      	uxthmi	r6, r6
 8001910:	07df      	lsls	r7, r3, #31
 8001912:	bf48      	it	mi
 8001914:	f043 0320 	orrmi.w	r3, r3, #32
 8001918:	6029      	str	r1, [r5, #0]
 800191a:	bf48      	it	mi
 800191c:	6023      	strmi	r3, [r4, #0]
 800191e:	b91e      	cbnz	r6, 8001928 <_printf_i+0x1a4>
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	f023 0320 	bic.w	r3, r3, #32
 8001926:	6023      	str	r3, [r4, #0]
 8001928:	2310      	movs	r3, #16
 800192a:	e7a7      	b.n	800187c <_printf_i+0xf8>
 800192c:	4824      	ldr	r0, [pc, #144]	; (80019c0 <_printf_i+0x23c>)
 800192e:	e7e4      	b.n	80018fa <_printf_i+0x176>
 8001930:	4615      	mov	r5, r2
 8001932:	e7bd      	b.n	80018b0 <_printf_i+0x12c>
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	6826      	ldr	r6, [r4, #0]
 8001938:	6961      	ldr	r1, [r4, #20]
 800193a:	1d18      	adds	r0, r3, #4
 800193c:	6028      	str	r0, [r5, #0]
 800193e:	0635      	lsls	r5, r6, #24
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	d501      	bpl.n	8001948 <_printf_i+0x1c4>
 8001944:	6019      	str	r1, [r3, #0]
 8001946:	e002      	b.n	800194e <_printf_i+0x1ca>
 8001948:	0670      	lsls	r0, r6, #25
 800194a:	d5fb      	bpl.n	8001944 <_printf_i+0x1c0>
 800194c:	8019      	strh	r1, [r3, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	6123      	str	r3, [r4, #16]
 8001952:	4615      	mov	r5, r2
 8001954:	e7bc      	b.n	80018d0 <_printf_i+0x14c>
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	1d1a      	adds	r2, r3, #4
 800195a:	602a      	str	r2, [r5, #0]
 800195c:	681d      	ldr	r5, [r3, #0]
 800195e:	6862      	ldr	r2, [r4, #4]
 8001960:	2100      	movs	r1, #0
 8001962:	4628      	mov	r0, r5
 8001964:	f7fe fc44 	bl	80001f0 <memchr>
 8001968:	b108      	cbz	r0, 800196e <_printf_i+0x1ea>
 800196a:	1b40      	subs	r0, r0, r5
 800196c:	6060      	str	r0, [r4, #4]
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	6123      	str	r3, [r4, #16]
 8001972:	2300      	movs	r3, #0
 8001974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001978:	e7aa      	b.n	80018d0 <_printf_i+0x14c>
 800197a:	6923      	ldr	r3, [r4, #16]
 800197c:	462a      	mov	r2, r5
 800197e:	4649      	mov	r1, r9
 8001980:	4640      	mov	r0, r8
 8001982:	47d0      	blx	sl
 8001984:	3001      	adds	r0, #1
 8001986:	d0ad      	beq.n	80018e4 <_printf_i+0x160>
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	079b      	lsls	r3, r3, #30
 800198c:	d413      	bmi.n	80019b6 <_printf_i+0x232>
 800198e:	68e0      	ldr	r0, [r4, #12]
 8001990:	9b03      	ldr	r3, [sp, #12]
 8001992:	4298      	cmp	r0, r3
 8001994:	bfb8      	it	lt
 8001996:	4618      	movlt	r0, r3
 8001998:	e7a6      	b.n	80018e8 <_printf_i+0x164>
 800199a:	2301      	movs	r3, #1
 800199c:	4632      	mov	r2, r6
 800199e:	4649      	mov	r1, r9
 80019a0:	4640      	mov	r0, r8
 80019a2:	47d0      	blx	sl
 80019a4:	3001      	adds	r0, #1
 80019a6:	d09d      	beq.n	80018e4 <_printf_i+0x160>
 80019a8:	3501      	adds	r5, #1
 80019aa:	68e3      	ldr	r3, [r4, #12]
 80019ac:	9903      	ldr	r1, [sp, #12]
 80019ae:	1a5b      	subs	r3, r3, r1
 80019b0:	42ab      	cmp	r3, r5
 80019b2:	dcf2      	bgt.n	800199a <_printf_i+0x216>
 80019b4:	e7eb      	b.n	800198e <_printf_i+0x20a>
 80019b6:	2500      	movs	r5, #0
 80019b8:	f104 0619 	add.w	r6, r4, #25
 80019bc:	e7f5      	b.n	80019aa <_printf_i+0x226>
 80019be:	bf00      	nop
 80019c0:	08001aed 	.word	0x08001aed
 80019c4:	08001afe 	.word	0x08001afe

080019c8 <memmove>:
 80019c8:	4288      	cmp	r0, r1
 80019ca:	b510      	push	{r4, lr}
 80019cc:	eb01 0402 	add.w	r4, r1, r2
 80019d0:	d902      	bls.n	80019d8 <memmove+0x10>
 80019d2:	4284      	cmp	r4, r0
 80019d4:	4623      	mov	r3, r4
 80019d6:	d807      	bhi.n	80019e8 <memmove+0x20>
 80019d8:	1e43      	subs	r3, r0, #1
 80019da:	42a1      	cmp	r1, r4
 80019dc:	d008      	beq.n	80019f0 <memmove+0x28>
 80019de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019e6:	e7f8      	b.n	80019da <memmove+0x12>
 80019e8:	4402      	add	r2, r0
 80019ea:	4601      	mov	r1, r0
 80019ec:	428a      	cmp	r2, r1
 80019ee:	d100      	bne.n	80019f2 <memmove+0x2a>
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019fa:	e7f7      	b.n	80019ec <memmove+0x24>

080019fc <_sbrk_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4d06      	ldr	r5, [pc, #24]	; (8001a18 <_sbrk_r+0x1c>)
 8001a00:	2300      	movs	r3, #0
 8001a02:	4604      	mov	r4, r0
 8001a04:	4608      	mov	r0, r1
 8001a06:	602b      	str	r3, [r5, #0]
 8001a08:	f7fe fd22 	bl	8000450 <_sbrk>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	d102      	bne.n	8001a16 <_sbrk_r+0x1a>
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	b103      	cbz	r3, 8001a16 <_sbrk_r+0x1a>
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	200001c8 	.word	0x200001c8

08001a1c <memcpy>:
 8001a1c:	440a      	add	r2, r1
 8001a1e:	4291      	cmp	r1, r2
 8001a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a24:	d100      	bne.n	8001a28 <memcpy+0xc>
 8001a26:	4770      	bx	lr
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a32:	4291      	cmp	r1, r2
 8001a34:	d1f9      	bne.n	8001a2a <memcpy+0xe>
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <_realloc_r>:
 8001a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	4614      	mov	r4, r2
 8001a40:	460e      	mov	r6, r1
 8001a42:	b921      	cbnz	r1, 8001a4e <_realloc_r+0x16>
 8001a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a48:	4611      	mov	r1, r2
 8001a4a:	f7ff bc49 	b.w	80012e0 <_malloc_r>
 8001a4e:	b92a      	cbnz	r2, 8001a5c <_realloc_r+0x24>
 8001a50:	f7ff fbda 	bl	8001208 <_free_r>
 8001a54:	4625      	mov	r5, r4
 8001a56:	4628      	mov	r0, r5
 8001a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a5c:	f000 f81b 	bl	8001a96 <_malloc_usable_size_r>
 8001a60:	4284      	cmp	r4, r0
 8001a62:	4607      	mov	r7, r0
 8001a64:	d802      	bhi.n	8001a6c <_realloc_r+0x34>
 8001a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001a6a:	d812      	bhi.n	8001a92 <_realloc_r+0x5a>
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4640      	mov	r0, r8
 8001a70:	f7ff fc36 	bl	80012e0 <_malloc_r>
 8001a74:	4605      	mov	r5, r0
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d0ed      	beq.n	8001a56 <_realloc_r+0x1e>
 8001a7a:	42bc      	cmp	r4, r7
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	4631      	mov	r1, r6
 8001a80:	bf28      	it	cs
 8001a82:	463a      	movcs	r2, r7
 8001a84:	f7ff ffca 	bl	8001a1c <memcpy>
 8001a88:	4631      	mov	r1, r6
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	f7ff fbbc 	bl	8001208 <_free_r>
 8001a90:	e7e1      	b.n	8001a56 <_realloc_r+0x1e>
 8001a92:	4635      	mov	r5, r6
 8001a94:	e7df      	b.n	8001a56 <_realloc_r+0x1e>

08001a96 <_malloc_usable_size_r>:
 8001a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a9a:	1f18      	subs	r0, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bfbc      	itt	lt
 8001aa0:	580b      	ldrlt	r3, [r1, r0]
 8001aa2:	18c0      	addlt	r0, r0, r3
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_init>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr

08001ab4 <_fini>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	bf00      	nop
 8001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aba:	bc08      	pop	{r3}
 8001abc:	469e      	mov	lr, r3
 8001abe:	4770      	bx	lr
